#!/usr/bin/python
# Write Python 3 code in this online editor and run it.
import re
#script_checkable="aaaa<script>/*code*/aaaa/*code*/javascript:alert(111)/*code*/</script>aaaa<script>/*code*/aaaa/*code*/javascript:alert(222)/*code*/</script>"
xsschecker="javascript"
reflections=3
renponse="aaaa<script>/*code*/aaaa/*code*/javascript:alert(111)/*code*/</script>aaaa<script>/*code*/aaaa/*code*/javascript:alert(222)/*code*/</script><!--aaaabbbccccjavascript:alert(111)-->"
clean_response = re.sub(r'<!--[.\s\S]*?-->', '', response)
script_checkable=clean_response
result=[]
position_and_context = {}
environment_details = {}

def extractScripts(response, xsschecker):
    scripts = []
    matches = re.finditer(r'(?s)<script.*?>(.*?)</script>', response.lower())
    for match in matches:
        if xsschecker in match.group(1):
            scripts.append((match.group(1), match.start(1)))
    return scripts
print(extractScripts(script_checkable, xsschecker))
for script, script_start in extractScripts(script_checkable, xsschecker):
	# 找到注释位置
    annotation_positions = []
    annotation_asterisk = re.finditer(r'(/\*[\s\S]*?\*/)', script, re.S)  # 星号
    for x in annotation_asterisk:
        annotation_positions.append((x.start(), x.start() + len(x.group()), "/*"))
    annotation_backslash = re.finditer(r'(//.*?)$', script, re.M)  # 正斜杠
    for x in annotation_backslash:
        annotation_positions.append((x.start(), x.start() + len(x.group()), "//"))
    occurences = re.finditer(r'(%s.*?)$' % xsschecker, script, re.M)
    if occurences:		
        for occurence in occurences:
            print(occurence.group(1))
            thisPosition = occurence.start(1) + script_start
            position_and_context[thisPosition] = 'script'
            environment_details[thisPosition] = {}
            startwith = script[int(thisPosition) - 2:int(thisPosition)]
            environment_details[thisPosition]['details'] = {}
            environment_details[thisPosition]['details']["startwith"] = startwith
            environment_details[thisPosition]['details']['annotation'] = ''
			# 匹配返回值是否在注释里
            for x, y, z in annotation_positions:
                if x < thisPosition and thisPosition < y:
                    environment_details[thisPosition]['details']["annotation"] = z
                    break
            for i in range(len(occurence.group())):
                currentChar = occurence.group()[i]
                print(currentChar)
                if currentChar in ('/', '\'', '`', '"'):                    
                    environment_details[thisPosition]['details']['quote'] = currentChar
                    break
                elif currentChar in (')', ']', '}', '}'):
                    break
            print ("annotation_positions: %s"%annotation_positions)
            print ("xsschecker absolute postion: %s"%thisPosition)
            print ("script: %s"%script)
            print (position_and_context[thisPosition])
            print(startwith)
            print(environment_details[thisPosition])
            #print(environment_details[thisPosition]['details']['quote'])
            #print(occurence.group())
            print("len of occurence: %s"%len(occurence.group()))
            #以上是script情况
print(position_and_context)
if len(position_and_context) < reflections:
        attribute_context = re.finditer(r'<[^>]*?(%s)[^>]*?>' % xsschecker, clean_response)
        for occurence in attribute_context:
            match = occurence.group(0)
            thisPosition = occurence.start(1)
            parts = re.split(r'\s', match)
            tag = parts[0][1:]
            for part in parts:
                if xsschecker in part:
                    Type, quote, name, value = '', '', '', ''
                    if '=' in part:
                        quote = re.search(r'=([\'`"])?', part).group(1)
                        name_and_value = part.split('=')[0], '='.join(part.split('=')[1:])
                        if xsschecker == name_and_value[0]:
                            Type = 'name'
                        else:
                            Type = 'value'
                        name = name_and_value[0]
                        value = name_and_value[1].rstrip('>').rstrip(quote).lstrip(quote)
                    else:
                        Type = 'flag'
                    environment_details[thisPosition] = {}
                    position_and_context[thisPosition] = 'attribute'
                    environment_details[thisPosition]['details'] = {}
                    startwith = clean_response[int(thisPosition) - 2:int(thisPosition)]
                    environment_details[thisPosition]['details']['startwith'] = startwith
                    environment_details[thisPosition]['details'] = {'tag': tag, 'type': Type, 'quote': quote,
                                                                    'value': value, 'name': name}
if len(position_and_context) < reflections:
        html_context = re.finditer(xsschecker, clean_response)
        for occurence in html_context:
            thisPosition = occurence.start()
            if thisPosition not in position_and_context:
                position_and_context[occurence.start()] = 'html'
                environment_details[thisPosition] = {}
                environment_details[thisPosition]['details'] = {}
                startwith = clean_response[int(thisPosition) - 2:int(thisPosition)]
                environment_details[thisPosition]['details']['startwith'] = startwith
if len(position_and_context) < reflections:
        comment_context = re.finditer(r'<!--[\s\S]*?(%s)[\s\S]*?-->' % xsschecker, response)
        for occurence in comment_context:
            thisPosition = occurence.start(1)
            position_and_context[thisPosition] = 'comment'
            environment_details[thisPosition] = {}
            environment_details[thisPosition]['details'] = {}
            startwith = response[int(thisPosition) - 2:int(thisPosition)]
            environment_details[thisPosition]['details']['startwith'] = startwith
